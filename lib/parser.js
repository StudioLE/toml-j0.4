module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Expressions: peg$parseExpressions },
        peg$startRuleFunction  = peg$parseExpressions,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = null,
        peg$c3 = function() {
                return g_root;
              },
        peg$c4 = function(path) {
                g_context = findContext(g_root, true, path);
              },
        peg$c5 = function(path) {
                g_context = findContext(g_root, false, path);
              },
        peg$c6 = function(keyValue) {
                checkTableKey(g_context.table, keyValue[0]);
                g_context.table[keyValue[0]] = keyValue[1];
              },
        peg$c7 = { type: "other", description: "Newline" },
        peg$c8 = "\n",
        peg$c9 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c10 = "\r\n",
        peg$c11 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c12 = { type: "other", description: "Whitespace" },
        peg$c13 = /^[ \t]/,
        peg$c14 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c15 = { type: "other", description: "Comment" },
        peg$c16 = "#",
        peg$c17 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c18 = void 0,
        peg$c19 = { type: "any", description: "any character" },
        peg$c20 = "=",
        peg$c21 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c22 = function(key, value) {
                return [key, value.value];
              },
        peg$c23 = function() {
                return text();
              },
        peg$c24 = { type: "other", description: "[a-z], [A-Z], [0-9], \"-\", \"_\"" },
        peg$c25 = /^[a-zA-Z0-9\-_]/,
        peg$c26 = { type: "class", value: "[a-zA-Z0-9\\-_]", description: "[a-zA-Z0-9\\-_]" },
        peg$c27 = function(chars) {
                return chars.join('');
              },
        peg$c28 = { type: "other", description: "DoubleQuote" },
        peg$c29 = "\"",
        peg$c30 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c31 = { type: "other", description: "SingleQuote" },
        peg$c32 = "'",
        peg$c33 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c34 = { type: "other", description: "ThreeDoubleQuotes" },
        peg$c35 = "\"\"\"",
        peg$c36 = { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
        peg$c37 = { type: "other", description: "ThreeSingleQuotes" },
        peg$c38 = "'''",
        peg$c39 = { type: "literal", value: "'''", description: "\"'''\"" },
        peg$c40 = function(chars) {
                return {
                  type: 'String',
                  value: chars.join('')
                };
              },
        peg$c41 = { type: "other", description: "NormalCharacter" },
        peg$c42 = /^[^\0-\x1F"\\]/,
        peg$c43 = { type: "class", value: "[^\\0-\\x1F\"\\\\]", description: "[^\\0-\\x1F\"\\\\]" },
        peg$c44 = "u",
        peg$c45 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c46 = "U",
        peg$c47 = { type: "literal", value: "U", description: "\"U\"" },
        peg$c48 = function() {
                var s = text();
                if (s.length <= 2) {
                  return unescape(s[1]);
                }
                return fromCodePoint(s.substr(2));
              },
        peg$c49 = { type: "other", description: "\"b\", \"f\", \"n\", \"r\", \"t\"" },
        peg$c50 = /^[bfnrt]/,
        peg$c51 = { type: "class", value: "[bfnrt]", description: "[bfnrt]" },
        peg$c52 = { type: "other", description: "Backslash" },
        peg$c53 = "\\",
        peg$c54 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c55 = { type: "other", description: "FourHexadecimalDigits" },
        peg$c56 = { type: "other", description: "EightHexadecimalDigits" },
        peg$c57 = /^[0-9A-Fa-f]/,
        peg$c58 = { type: "class", value: "[0-9A-Fa-f]", description: "[0-9A-Fa-f]" },
        peg$c59 = function() {
                var s = text();
                return {
                  type: 'String',
                  value: s.substr(1, s.length - 2)
                };
              },
        peg$c60 = /^[^\0-\x08\n-\x1F']/,
        peg$c61 = { type: "class", value: "[^\\0-\\x08\\n-\\x1F']", description: "[^\\0-\\x08\\n-\\x1F']" },
        peg$c62 = function(chars) {
                return {
                  type: 'String',
                  value: chars.join('').replace(/\\\r?\n(?:\r?\n|[ \t])*/g, '')
                };
              },
        peg$c63 = /^[^\0-\x1F\\]/,
        peg$c64 = { type: "class", value: "[^\\0-\\x1F\\\\]", description: "[^\\0-\\x1F\\\\]" },
        peg$c65 = { type: "other", description: "AnyCharacter" },
        peg$c66 = /^[^\0-\x08\n-\x1F]/,
        peg$c67 = { type: "class", value: "[^\\0-\\x08\\n-\\x1F]", description: "[^\\0-\\x08\\n-\\x1F]" },
        peg$c68 = "true",
        peg$c69 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c70 = function() {
                return {
                  type: 'Boolean',
                  value: true
                };
              },
        peg$c71 = "false",
        peg$c72 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c73 = function() {
                return {
                  type: 'Boolean',
                  value: false
                };
              },
        peg$c74 = function() {
                // A double-precision 64-bit floating-point number in IEEE 754 standard.
                var s = text();
                var number = parseFloat(s.replace(/_/g, ''));
                if (!isFiniteNumber(number)) {
                  error(s + 'is not a 64-bit floating-point number.');
                }
                return {
                  type: 'Float',
                  value: number
                };
              },
        peg$c75 = ".",
        peg$c76 = { type: "literal", value: ".", description: "\".\"" },
        peg$c77 = "_",
        peg$c78 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c79 = "e",
        peg$c80 = { type: "literal", value: "e", description: "\"e\"" },
        peg$c81 = "E",
        peg$c82 = { type: "literal", value: "E", description: "\"E\"" },
        peg$c83 = function() {
                // Be careful of JavaScript limits:
                // 1) Number.MAX_SAFE_INTEGER = 9007199254740991
                // 2) Number.MIN_SAFE_INTEGER = -9007199254740991
                var s = text();
                var number = s.replace(/_/g, '');
                // Check if it is a 64-bit signed integer.
                var invalid = false;
                if (number[0] === '-') {
                  var minInt = '-9223372036854775808';
                  if (number.length > minInt.length ||
                      (number.length === minInt.length && number > minInt)) {
                    invalid = true;
                  }
                } else {
                  if (number[0] === '+') {
                    number = number.substr(1);
                  }
                  var maxInt = '9223372036854775807';
                  if (number.length > maxInt.length ||
                      (number.length === maxInt.length && number > maxInt)) {
                    invalid = true;
                  }
                }
                if (invalid) {
                  error(s + ' is not a 64-bit signed integer.');
                }
                number = parseInt(number, 10);
                if (!isFiniteNumber(number)) {
                  error(s + ' is not a 64-bit signed integer.');
                }
                return {
                  type: 'Integer',
                  value: number
                };
              },
        peg$c84 = "+",
        peg$c85 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c86 = "-",
        peg$c87 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c88 = /^[1-9]/,
        peg$c89 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c90 = /^[0-9]/,
        peg$c91 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c92 = "T",
        peg$c93 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c94 = function() {
                var s = text();
                var date = new Date(s);
                if (!isFiniteNumber(date.getTime())) {
                  error('Date-time ' + s + ' is invalid. It does not conform to RFC 3339 or this is a browser-specific problem.');
                }
                return {
                  type: 'DateTime',
                  value: date
                };
              },
        peg$c95 = { type: "other", description: "FullDate (YYYY-mm-dd)" },
        peg$c96 = ":",
        peg$c97 = { type: "literal", value: ":", description: "\":\"" },
        peg$c98 = { type: "other", description: "Hour (HH)" },
        peg$c99 = { type: "other", description: "Minute (MM)" },
        peg$c100 = { type: "other", description: "Second (SS)" },
        peg$c101 = { type: "other", description: "TimeOffset (Z or +/-HH:MM)" },
        peg$c102 = "Z",
        peg$c103 = { type: "literal", value: "Z", description: "\"Z\"" },
        peg$c104 = "[",
        peg$c105 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c106 = ",",
        peg$c107 = { type: "literal", value: ",", description: "\",\"" },
        peg$c108 = "]",
        peg$c109 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c110 = function(values) {
                var o = {
                  type: 'Array',
                  value: values ? values[0] : []
                };
                for (var i = 0, arr = o.value, l = arr.length; i < l; i++) {
                  arr[i] = arr[i].value;
                }
                return o;
              },
        peg$c111 = function(value, opt) {
                var array = [value];
                if (opt) {
                  var type = value.type;
                  for (var i = 0, arr = opt[3], l = arr.length; i < l; i++) {
                    if (type !== arr[i].type) {
                      error(stringify(arr[i].value) + ' should be of type "' + type +
                          '".');
                    }
                    array.push(arr[i]);
                  }
                }
                return array;
              },
        peg$c112 = "{",
        peg$c113 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c114 = "}",
        peg$c115 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c116 = function(opt) {
                var table = {};
                if (opt) {
                  table[opt[0][0]] = opt[0][1];
                  for (var i = 0, arr = opt[1], l = arr.length; i < l; i++) {
                    var kv = arr[i][3];
                    checkTableKey(table, kv[0]);
                    table[kv[0]] = kv[1];
                  }
                }
                return {
                  type: 'InlineTable',
                  value: table
                };
              },
        peg$c117 = function(path) {
                return path;
              },
        peg$c118 = function(key, arr) {
                var path = [key];
                for (var i = 0, l = arr.length; i < l; i++) {
                  path.push(arr[i][3]);
                }
                return path;
              },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseExpressions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWhitespace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseNewline();
        if (s2 === peg$FAILED) {
          s2 = peg$parseComment();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWhitespace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseNewline();
          if (s2 === peg$FAILED) {
            s2 = peg$parseComment();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseWhitespace();
          if (s5 === peg$FAILED) {
            s5 = peg$parseComment();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseWhitespace();
            if (s5 === peg$FAILED) {
              s5 = peg$parseComment();
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseNewline();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpressions();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c2;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c3();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTableArrayHeader();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c4(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseTableHeader();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c5(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseKeyValue();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c6(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseNewline() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c8;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c10) {
          s0 = peg$c10;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseWhitespace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c13.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseNewline();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c18;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseNewline();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c18;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parseKeyValue() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseKey();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWhitespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseWhitespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseWhitespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseKey() {
      var s0;

      s0 = peg$parseBareKey();
      if (s0 === peg$FAILED) {
        s0 = peg$parseQuotedKey();
      }

      return s0;
    }

    function peg$parseBareKey() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseBareKeyCharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseBareKeyCharacter();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c23();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBareKeyCharacter() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c25.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }

      return s0;
    }

    function peg$parseQuotedKey() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDoubleQuote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseBasicCharacter();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseBasicCharacter();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDoubleQuote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c27(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDoubleQuote() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }

      return s0;
    }

    function peg$parseSingleQuote() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c32;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }

      return s0;
    }

    function peg$parseThreeDoubleQuotes() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parseThreeSingleQuotes() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c38) {
        s0 = peg$c38;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }

      return s0;
    }

    function peg$parseValue() {
      var s0;

      s0 = peg$parseString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBoolean();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDateTime();
          if (s0 === peg$FAILED) {
            s0 = peg$parseFloat();
            if (s0 === peg$FAILED) {
              s0 = peg$parseInteger();
              if (s0 === peg$FAILED) {
                s0 = peg$parseArray();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseInlineTable();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseString() {
      var s0;

      s0 = peg$parseMultilineBasicString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBasicString();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMultilineLiteralString();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLiteralString();
          }
        }
      }

      return s0;
    }

    function peg$parseBasicString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDoubleQuote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseBasicCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseBasicCharacter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDoubleQuote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c40(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBasicCharacter() {
      var s0;

      s0 = peg$parseNormalCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEscapedCharacter();
      }

      return s0;
    }

    function peg$parseNormalCharacter() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseNewline();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c18;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c42.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c23();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }

      return s0;
    }

    function peg$parseEscapedCharacter() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBackslash();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseControlCharacter();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDoubleQuote();
          if (s2 === peg$FAILED) {
            s2 = peg$parseBackslash();
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 117) {
                s3 = peg$c44;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseFourHexadecimalDigits();
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 85) {
                  s3 = peg$c46;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseEightHexadecimalDigits();
                  if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c48();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseControlCharacter() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c50.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }

      return s0;
    }

    function peg$parseBackslash() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c53;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }

      return s0;
    }

    function peg$parseFourHexadecimalDigits() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHexDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHexDigit();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseHexDigit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseHexDigit();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      return s0;
    }

    function peg$parseEightHexadecimalDigits() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHexDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHexDigit();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseHexDigit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseHexDigit();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseHexDigit();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseHexDigit();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseHexDigit();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseHexDigit();
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c57.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      return s0;
    }

    function peg$parseLiteralString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSingleQuote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseLiteralCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseLiteralCharacter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSingleQuote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c59();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLiteralCharacter() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseNewline();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c18;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }

      return s0;
    }

    function peg$parseMultilineBasicString() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseThreeDoubleQuotes();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNewline();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseMultilineBasicText();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseMultilineBasicText();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseThreeDoubleQuotes();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c62(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultilineBasicText() {
      var s0, s1, s2;

      s0 = peg$parseMultilineBasicCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBackslash();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNewline();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c23();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseNewline();
        }
      }

      return s0;
    }

    function peg$parseMultilineBasicCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseThreeDoubleQuotes();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c18;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMultilineNormalCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c23();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseEscapedCharacter();
      }

      return s0;
    }

    function peg$parseMultilineNormalCharacter() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseNewline();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c18;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c63.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }

      return s0;
    }

    function peg$parseMultilineLiteralString() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseThreeSingleQuotes();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNewline();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseMultilineLiteralText();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseMultilineLiteralText();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseThreeSingleQuotes();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c40(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMultilineLiteralText() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c38) {
        s2 = peg$c38;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c18;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMultilineLiteralCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c23();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNewline();
      }

      return s0;
    }

    function peg$parseMultilineLiteralCharacter() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseNewline();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c18;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c66.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      return s0;
    }

    function peg$parseBoolean() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c70();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c71) {
          s1 = peg$c71;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseFloat() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseInteger();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseFraction();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExponent();
          if (s4 === peg$FAILED) {
            s4 = peg$c2;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseExponent();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c74();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFraction() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c75;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c77;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseDigit();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c77;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c2;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseDigit();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseExponent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 101) {
        s1 = peg$c79;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 69) {
          s1 = peg$c81;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInteger();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseInteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSign();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIntDigits();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c83();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSign() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c84;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c86;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
      }

      return s0;
    }

    function peg$parseIntDigits() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDigit_1to9();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s4 = peg$c77;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s4 === peg$FAILED) {
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDigit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c77;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDigit();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigit();
      }

      return s0;
    }

    function peg$parseDigit_1to9() {
      var s0;

      if (peg$c88.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseDigit() {
      var s0;

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parseDateTime() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFullDate();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 84) {
          s2 = peg$c92;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFullTime();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c94();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFullDate() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseYear();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c86;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMonth();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c86;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMDay();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parseYear() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDigit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDigit();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMonth() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseMDay() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFullTime() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseTime();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTimeOffset();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTime() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseHour();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c96;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMinute();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c96;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSecond();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseSecondFraction();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHour() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parseMinute() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }

      return s0;
    }

    function peg$parseSecond() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigit();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }

      return s0;
    }

    function peg$parseSecondFraction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c75;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDigit();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTimeOffset() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 90) {
        s0 = peg$c102;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSign();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHour();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c96;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseMinute();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      return s0;
    }

    function peg$parseArray() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c104;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseArraySpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseArraySpace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseArrayValue();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseArraySpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseArraySpace();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c106;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseArraySpace();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseArraySpace();
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c2;
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c108;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c110(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArrayValue() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseArraySpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseArraySpace();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c106;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseArraySpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseArraySpace();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseArrayValue();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c111(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArraySpace() {
      var s0;

      s0 = peg$parseWhitespace();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNewline();
        if (s0 === peg$FAILED) {
          s0 = peg$parseComment();
        }
      }

      return s0;
    }

    function peg$parseInlineTable() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c112;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWhitespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseKeyValue();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parseWhitespace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseWhitespace();
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c106;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseWhitespace();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseWhitespace();
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseKeyValue();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parseWhitespace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseWhitespace();
              }
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c106;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c107); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseWhitespace();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseWhitespace();
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseKeyValue();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseWhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseWhitespace();
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c114;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c116(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTableArrayHeader() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c104;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTableHeader();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c108;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c117(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTableHeader() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c104;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseWhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWhitespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseKey();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseWhitespace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseWhitespace();
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c75;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseWhitespace();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseWhitespace();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseKey();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseWhitespace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseWhitespace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c75;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c76); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseWhitespace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseWhitespace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseKey();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseWhitespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseWhitespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c108;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c118(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


      var genMsgRedefined, isFiniteNumber, isArray, hasOwnProperty, stringify,
          unescape, fromCodePoint, checkTableKey, findContext;

      genMsgRedefined = function (key) {
        return ('Value for ' + key + ' should not be redefined in the same table.');
      };

      isFiniteNumber = Number.isFinite || function (n) {
        return typeof n === 'number' && isFinite(n);
      };

      isArray = Array.isArray || function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };

      hasOwnProperty = function (obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      };

      stringify = typeof JSON === 'object' && JSON ? JSON.stringify : function (o) {
        return '"' + String(o).replace(/[\x00-\x1F"\\]/g, function (c) {
          switch (c) {
            case '"': case '\\': return '\\' + c;
            case '\t': return '\\t';
            case '\n': return '\\n';
            case '\r': return '\\r';
            case '\b': return '\\b';
            case '\f': return '\\f';
            default:
              var hex = c.charCodeAt(0).toString(16);
              return '\\u' + '0000'.substr(hex.length) + hex;
          }
        }) + '"';
      };

      unescape = function (c) {
        switch (c) {
          case '"': case '\\': return c;
          case 't': return '\t';
          case 'n': return '\n';
          case 'r': return '\r';
          case 'b': return '\b';
          case 'f': return '\f';
          default: error(stringify(c) + ' cannot be escaped.');
        }
      };

      fromCodePoint = function (s) {
        s = s.replace(/^0+/, '');
        var maxCodePoint = '10FFFF';
        var codepoint = parseInt(s, 16);
        if (!isFiniteNumber(codepoint) ||
            s.length > maxCodePoint.length ||
            (s.length === maxCodePoint.length && s > maxCodePoint)) {
          error('U+' + s + ' is not a valid Unicode code point.');
        }
        if (String.fromCodePoint) {
          return String.fromCodePoint(codepoint);
        }
        // See: punnycode.ucs2.encode from https://github.com/bestiejs/punycode.js
        var c = '';
        if (codepoint > 0xFFFF) {
          codepoint -= 0x10000;
          c += String.fromCharCode((codepoint >>> 10) & 0x3FF | 0xD800);
          codepoint = 0xDC00 | codepoint & 0x3FF;
        }
        c += String.fromCharCode(codepoint);
        return c;
      };

      checkTableKey = function (table, k) {
        if (hasOwnProperty(table, k)) {
          error(genMsgRedefined(stringify(k)));
        }
      };

      findContext = function (table, isTableArray, path) {
        var s = '';
        for (var i = 0, l = path.length; i < l; i++) {
          var k = path[i];
          s += (s ? '.' : '') + stringify(k);
          if (!hasOwnProperty(table, k)) {
            if (isTableArray && i + 1 === l) {
              var t = {};
              table[k] = [t];
              table = t;
              g_table_arrays[s] = true;
            } else {
              table = table[k] = {};
              g_tables[s] = true;
            }
          } else {
            if (isTableArray) {
              if (isArray(table[k])) {
                if (!g_table_arrays[s]) {
                  error(genMsgRedefined(s));
                }
                if (i + 1 === l) {
                  var t = {};
                  table[k].push(t);
                  table = t;
                } else {
                  table = table[k][table[k].length-1];
                }
              } else {
                if (!g_tables[s]) {
                  error(genMsgRedefined(s));
                }
                table = table[k];
              }
            } else {
              if (isArray(table[k])) {
                if (!g_table_arrays[s]) {
                  error(genMsgRedefined(s));
                }
                table = table[k][table[k].length-1];
              } else {
                if (!g_tables[s]) {
                  error(genMsgRedefined(s));
                }
                table = table[k];
              }
            }
          }
        }
        if (isTableArray) {
          if (!g_table_arrays[s]) {
            error(genMsgRedefined(s));
          }
        } else {
          if (g_defined_tables[s] || g_table_arrays[s]) {
            error(genMsgRedefined(s));
          }
          g_defined_tables[s] = true;
        }
        return {
          table: table,
          path: path
        };
      };

      var g_root = {};             // TOML table
      var g_context = {            // current context
        table: g_root,
        path: []
      };
      var g_tables = {};           // paths to tables
      var g_defined_tables = {};   // paths to tables directly defined
      var g_table_arrays = {};     // paths to table arrays


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})()